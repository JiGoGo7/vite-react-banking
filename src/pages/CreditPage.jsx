import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { registerCredit, payCredit, getApprovedCredit } from "../services/creditService";
import "../desifnFiles/creditPage.css";

const Credit = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [credit, setCredit] = useState(null);
  const [userId, setUserId] = useState("");
  const [fullName, setFullName] = useState("");
  const [age, setAge] = useState("");
  const [job, setJob] = useState(false);
  const [maritalStatus, setMaritalStatus] = useState(false);
  const [income, setIncome] = useState("");
  const [expenses, setExpenses] = useState("");
  const [requestedAmount, setRequestedAmount] = useState("");
  const [message, setMessage] = useState("");

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      const parsedUser = JSON.parse(storedUser);
      setUser(parsedUser);
      setUserId(parsedUser.userId);
    }
  }, [navigate]);

  useEffect(() => {
    if (user) {
      getApprovedCredit(user.username).then((credit) => {
        setCredit(credit || null);
      });
    }
  }, [user]);

  const handleCredit = async (e) => {
    e.preventDefault();
    try {
      const response = await registerCredit({
        userId,
        fullName,
        age: Number(age),
        job,
        maritalStatus,
        income: Number(income),
        expenses: Number(expenses),
        requestedAmount: Number(requestedAmount),
      });

      if (response.ok) {
        setMessage("–ó–∞–ø–∏—Ç –Ω–∞ –∫—Ä–µ–¥–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!");
      } else {
        setMessage(response.message || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—É");
      }
    } catch (error) {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  };

  const handlePayCredit = async () => {
    if (!credit) return;
    try {
      const response = await payCredit(user.userId, credit._id);
      if (response.ok) {
        setMessage("–ö—Ä–µ–¥–∏—Ç —É—Å–ø—ñ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω–∏–π!");
        setCredit(null);
      } else {
        setMessage(response.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø–ª–∞—Ç—ñ –∫—Ä–µ–¥–∏—Ç—É");
      }
    } catch (error) {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  };

  return (
    <div className="credit-container">
      {user ? (
        <>
          <h2 className="credit-title">üè¶ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç—É–≤–∞–Ω–Ω—è</h2>
          {credit ? (
            <div className="credit-card">
              <h4>–í–∞—à –∞–∫—Ç–∏–≤–Ω–∏–π –∫—Ä–µ–¥–∏—Ç</h4>
              <p><strong>–°—É–º–∞:</strong> {credit.requestedAmount} –≥—Ä–Ω</p>
              <p><strong>–î–æ —Å–ø–ª–∞—Ç–∏:</strong> {credit.requestedAmount * 1.1} –≥—Ä–Ω</p>
              <button className="credit-btn" onClick={handlePayCredit}>–ü–æ–≥–∞—Å–∏—Ç–∏ –∫—Ä–µ–¥–∏—Ç</button>
            </div>
          ) : (
            <form className="credit-form" onSubmit={handleCredit}>
              <h4>–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É</h4>
              <input type="text" placeholder="–ü–æ–≤–Ω–µ —ñ–º'—è" value={fullName} onChange={(e) => setFullName(e.target.value)} required />
              <input type="number" placeholder="–í—ñ–∫" value={age} onChange={(e) => setAge(e.target.value)} required />
              <label>
                –ü—Ä–∞—Ü–µ–≤–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π:
                <input type="checkbox" checked={job} onChange={(e) => setJob(e.target.checked)} />
              </label>
              <label>
                –û–¥—Ä—É–∂–µ–Ω–∏–π:
                <input type="checkbox" checked={maritalStatus} onChange={(e) => setMaritalStatus(e.target.checked)} />
              </label>
              <input type="number" placeholder="–î–æ—Ö—ñ–¥" value={income} onChange={(e) => setIncome(e.target.value)} required />
              <input type="number" placeholder="–í–∏—Ç—Ä–∞—Ç–∏" value={expenses} onChange={(e) => setExpenses(e.target.value)} required />
              <input type="number" placeholder="–°—É–º–∞ –∫—Ä–µ–¥–∏—Ç—É" value={requestedAmount} onChange={(e) => setRequestedAmount(e.target.value)} required />
              <button type="submit" className="credit-btn">–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
            </form>
          )}
          {message && <p className="credit-message">{message}</p>}
        </>
      ) : (
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...</p>
      )}
    </div>
  );
};

export default Credit;
