import { useEffect, useState } from 'react';
import { getUserBalance, updateUserBalance } from '../services/balanceService';
import { findUser } from '../services/otherService';
import '../desifnFiles/transferPage.css';

export default function Transfer() {
    const [user, setUser] = useState(null);
    const [balance, setBalance] = useState(0);
    const [otherUsername, setOtherUsername] = useState('');
    const [tBalance, setTBalance] = useState(0);

    useEffect(() => {
        const storedUser = localStorage.getItem('user');
        if (storedUser) {
            const parsedUser = JSON.parse(storedUser);
            setUser(parsedUser);
            getUserBalance(parsedUser.username).then((res) => {
                setBalance(res.balance);
            });
        }
    }, []);

    const transfer = async () => {
        try {
            const foundUser = await findUser(otherUsername);

            if (!foundUser) {
                alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const transferBalance = Number(tBalance);

            if (foundUser.username === user.username) {
                alert('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ –∫–æ—à—Ç–∏ —Å–∞–º—ñ —Å–æ–±—ñ!');
                return;
            }

            if (transferBalance <= 0) {
                alert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É!');
                return;
            }

            if (balance < transferBalance) {
                alert('–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó');
                return;
            }

            await updateUserBalance(foundUser._id, transferBalance);

            const userBalance = balance - transferBalance;
            await updateUserBalance(user.userId, -transferBalance);
            setBalance(userBalance);

            alert('–û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–∞–∑—É –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!');
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <div className="transfer-container">
            {user ? (
                <>
                    <h1 className="transfer-header">üîÉ–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤</h1>
                    <p className="transfer-text">–î–ª—è –ø–µ—Ä–µ–∫–∞–∑—É, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</p>
                    <div className="transfer-form">
                        <input
                            type="text"
                            placeholder="Username"
                            value={otherUsername}
                            onChange={(e) => setOtherUsername(e.target.value)}
                            required
                            className="input-field"
                        />
                        <input
                            type="number"
                            placeholder="–°—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É"
                            value={tBalance}
                            onChange={(e) => setTBalance(e.target.value)}
                            required
                            className="input-field"
                        />
                        <button onClick={transfer} className="transfer-button">
                            –ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤
                        </button>
                    </div>
                    <div className="balance-info">
                        <p>–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username}</p>
                        <p>–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {balance}</p>
                    </div>
                </>
            ) : (
                <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...</p>
            )}
        </div>
    );
}
